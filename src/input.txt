/**
 * Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。
 * Node.js，Stream 有四种流类型：
 * Readable - 可读操作。
 * Writable - 可写操作。
 * Duplex - 可读可写操作.
 * Transform - 操作被写入数据，然后读出结果
 *
 * 所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：
 * data - 当有数据可读时触发。
 * end - 没有更多的数据可读时触发。
 * error - 在接收和写入过程中发生错误时触发。
 * finish - 所有数据已被写入到底层系统时触发。
 *
 * 本教程会为大家介绍常用的流操作。
 */

// eg:从流中读取数据
import fs from 'fs';
import {setTimeout} from "timers";

let data = '';
// 创建可读流
let readerStream = fs.createReadStream('./input.txt');
// 编码
readerStream.setEncoding("utf8");

// 处理流事件 --> data, end, and error
readerStream.on('data', function (chunk) {
    data += chunk;
    console.log('chunk=' + chunk)
});
readerStream.on('end', function () {
    console.log("data:", data);
});

readerStream.on('error', function (err) {
    console.log("error:", err.stack);
});

console.log("读取程序执行完毕");

/*
eg:写入流
 */
function sleep(time) {
    return new Promise(resolve => setTimeout(resolve, time));
}

await sleep(1000);

// data = "hello world";
let writeStream = fs.createWriteStream("./output.txt");
writeStream.write(data, "utf-8");
writeStream.end();

writeStream.on("finish", () => {
    console.log("写入完成")
})
writeStream.on("error", err => {
    console.log("error:", err.stack)
})

console.log("写入程序执行完毕")

await sleep(1000);
/*
管道流
管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。
source --data--> dest
 */
readerStream.pipe(fs.createWriteStream("output2.txt"));
console.log("管道流程序执行完毕");

await sleep(1000);
/*
链式流
链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。
接下来我们就是用管道和链式来压缩和解压文件。
 */
import zlib from "zlib";
fs.createReadStream("input.txt")
    .pipe(zlib.createGzip())
    .pipe(fs.createWriteStream("input.txt.gz"));
console.log("文件压缩完成。");

await sleep(1000);
fs.createReadStream('input.txt.gz')
    .pipe(zlib.createGunzip())
    .pipe(fs.createWriteStream("input2.txt"));
console.log("文件解压完成")